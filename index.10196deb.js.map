{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.board = initialState;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const currentRow = this.board[row];\n            const { newRow: newRow, gainedScore: gainedScore } = this.compressRow(currentRow);\n            if (!this.areRowEqual(currentRow, newRow)) {\n                this.board[row] = newRow;\n                moved = true;\n                this.score += gainedScore;\n            }\n        }\n        if (moved) this.addRandomTile();\n        this.updateStatus();\n    }\n    moveRight() {\n        const prevState = JSON.stringify(this.board);\n        for(let row = 0; row < 4; row++){\n            const reverseRow = [\n                ...this.board[row]\n            ].reverse();\n            const { newRow: newRow, gainedScore: gainedScore } = this.compressRow(reverseRow);\n            this.board[row] = newRow.reverse();\n            this.score += gainedScore;\n        }\n        const newState = JSON.stringify(this.board);\n        if (newState !== prevState) this.addRandomTile();\n        this.updateStatus();\n    }\n    moveUp() {\n        const prevState = JSON.stringify(this.board);\n        for(let col = 0; col < 4; col++){\n            const column = [\n                this.board[0][col],\n                this.board[1][col],\n                this.board[2][col],\n                this.board[3][col]\n            ];\n            const { newRow: newRow, gainedScore: gainedScore } = this.compressRow(column);\n            for(let row = 0; row < 4; row++)this.board[row][col] = newRow[row];\n            this.score += gainedScore;\n        }\n        const newState = JSON.stringify(this.board);\n        if (newState !== prevState) this.addRandomTile();\n        this.updateStatus();\n    }\n    moveDown() {\n        const prevState = JSON.stringify(this.board);\n        for(let col = 0; col < 4; col++){\n            const column = [\n                this.board[3][col],\n                this.board[2][col],\n                this.board[1][col],\n                this.board[0][col]\n            ];\n            const { newRow: newRow, gainedScore: gainedScore } = this.compressRow(column);\n            for(let row = 0; row < 4; row++)this.board[3 - row][col] = newRow[row];\n            this.score += gainedScore;\n        }\n        const newState = JSON.stringify(this.board);\n        if (newState !== prevState) this.addRandomTile();\n        this.updateStatus();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = Array(4).fill().map(()=>Array(4).fill(0));\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    addRandomTile() {\n        const cells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) cells.push({\n                row: row,\n                col: col\n            });\n        }\n        const randomIndex = Math.floor(Math.random() * cells.length);\n        const { row: randomRow, col: randomCol } = cells[randomIndex];\n        const newValue = Math.random() < 0.9 ? 2 : 4;\n        this.board[randomRow][randomCol] = newValue;\n    }\n    compressRow(row) {\n        let filtered = row.filter((num)=>num !== 0);\n        let score = 0;\n        for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n            filtered[i] *= 2;\n            filtered[i + 1] = 0;\n            score += filtered[i];\n            i++;\n        }\n        filtered = filtered.filter((num)=>num !== 0);\n        const zerosToAdd = 4 - filtered.length;\n        for(let i = 0; i < zerosToAdd; i++)filtered.push(0);\n        return {\n            newRow: filtered,\n            gainedScore: score\n        };\n    }\n    areRowEqual(row1, row2) {\n        return row1.every((value, index)=>value === row2[index]);\n    }\n    updateStatus() {\n        for (const row of this.board)if (row.includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n        for (const row of this.board)if (row.includes(0)) {\n            this.status = \"playing\";\n            return;\n        }\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.board[row][col];\n            if (col < 3 && current === this.board[row][col + 1] || row < 3 && current === this.board[row + 1][col]) {\n                this.status = \"playing\";\n                return;\n            }\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$renderBoard = ()=>{\n    const boardGame = $09e991522ca7e64e$var$game.getState();\n    const scoreGame = $09e991522ca7e64e$var$game.getScore();\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$scoreElement.textContent = scoreGame;\n    for(let i = 0; i < $09e991522ca7e64e$var$cells.length; i++){\n        const cell = $09e991522ca7e64e$var$cells[i];\n        const row = Math.floor(i / 4);\n        const col = i % 4;\n        const value = boardGame[row][col];\n        if (value === 0) cell.textContent = \"\";\n        else cell.textContent = value;\n        cell.className = \"field-cell\";\n        if (value > 0) cell.classList.add(`field-cell--${value}`);\n    }\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    if (statusGame === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if (statusGame === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n};\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$renderBoard();\n});\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    const statusButton = $09e991522ca7e64e$var$game.getStatus();\n    if (statusButton === \"idle\") $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n    $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n    $09e991522ca7e64e$var$renderBoard();\n});\n\n\n//# sourceMappingURL=index.10196deb.js.map\n","'use strict';\n\n// import Game from '../modules/Game.class';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst scoreElement = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst buttonStart = document.querySelector('.button.start');\n\nconst renderBoard = () => {\n  const boardGame = game.getState();\n  const scoreGame = game.getScore();\n  const statusGame = game.getStatus();\n\n  scoreElement.textContent = scoreGame;\n\n  for (let i = 0; i < cells.length; i++) {\n    const cell = cells[i];\n    const row = Math.floor(i / 4);\n    const col = i % 4;\n    const value = boardGame[row][col];\n\n    if (value === 0) {\n      cell.textContent = '';\n    } else {\n      cell.textContent = value;\n    }\n\n    cell.className = 'field-cell';\n\n    if (value > 0) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  }\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  if (statusGame === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (statusGame === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n};\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  renderBoard();\n});\n\nbuttonStart.addEventListener('click', () => {\n  const statusButton = game.getStatus();\n\n  if (statusButton === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  buttonStart.classList.remove('start');\n  buttonStart.classList.add('restart');\n  buttonStart.textContent = 'Restart';\n\n  renderBoard();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const currentRow = this.board[row];\n      const { newRow, gainedScore } = this.compressRow(currentRow);\n\n      if (!this.areRowEqual(currentRow, newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n        this.score += gainedScore;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.updateStatus();\n  }\n\n  moveRight() {\n    const prevState = JSON.stringify(this.board);\n\n    for (let row = 0; row < 4; row++) {\n      const reverseRow = [...this.board[row]].reverse();\n\n      const { newRow, gainedScore } = this.compressRow(reverseRow);\n\n      this.board[row] = newRow.reverse();\n      this.score += gainedScore;\n    }\n\n    const newState = JSON.stringify(this.board);\n\n    if (newState !== prevState) {\n      this.addRandomTile();\n    }\n\n    this.updateStatus();\n  }\n\n  moveUp() {\n    const prevState = JSON.stringify(this.board);\n\n    for (let col = 0; col < 4; col++) {\n      const column = [\n        this.board[0][col],\n        this.board[1][col],\n        this.board[2][col],\n        this.board[3][col],\n      ];\n\n      const { newRow, gainedScore } = this.compressRow(column);\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newRow[row];\n      }\n\n      this.score += gainedScore;\n    }\n\n    const newState = JSON.stringify(this.board);\n\n    if (newState !== prevState) {\n      this.addRandomTile();\n    }\n\n    this.updateStatus();\n  }\n\n  moveDown() {\n    const prevState = JSON.stringify(this.board);\n\n    for (let col = 0; col < 4; col++) {\n      const column = [\n        this.board[3][col],\n        this.board[2][col],\n        this.board[1][col],\n        this.board[0][col],\n      ];\n\n      const { newRow, gainedScore } = this.compressRow(column);\n\n      for (let row = 0; row < 4; row++) {\n        this.board[3 - row][col] = newRow[row];\n      }\n\n      this.score += gainedScore;\n    }\n\n    const newState = JSON.stringify(this.board);\n\n    if (newState !== prevState) {\n      this.addRandomTile();\n    }\n\n    this.updateStatus();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = Array(4)\n      .fill()\n      .map(() => Array(4).fill(0));\n\n    this.score = 0;\n    this.status = 'playing';\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const cells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          cells.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    const randomIndex = Math.floor(Math.random() * cells.length);\n    const { row: randomRow, col: randomCol } = cells[randomIndex];\n\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.board[randomRow][randomCol] = newValue;\n  }\n\n  compressRow(row) {\n    let filtered = row.filter((num) => num !== 0);\n    let score = 0;\n\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        filtered[i + 1] = 0;\n        score += filtered[i];\n        i++;\n      }\n    }\n\n    filtered = filtered.filter((num) => num !== 0);\n\n    const zerosToAdd = 4 - filtered.length;\n\n    for (let i = 0; i < zerosToAdd; i++) {\n      filtered.push(0);\n    }\n\n    return {\n      newRow: filtered, gainedScore: score,\n    };\n  }\n\n  areRowEqual(row1, row2) {\n    return row1.every((value, index) => value === row2[index]);\n  }\n\n  updateStatus() {\n    for (const row of this.board) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n\n    for (const row of this.board) {\n      if (row.includes(0)) {\n        this.status = 'playing';\n\n        return;\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.board[row][col];\n\n        if (\n          (col < 3 && current === this.board[row][col + 1])\n          || (row < 3 && current === this.board[row + 1][col])\n        ) {\n          this.status = 'playing';\n\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","status","score","moveLeft","moved","row","currentRow","newRow","gainedScore","compressRow","areRowEqual","addRandomTile","updateStatus","moveRight","prevState","JSON","stringify","reverseRow","reverse","moveUp","col","column","moveDown","getScore","getState","getStatus","start","Array","fill","map","restart","cells","push","randomIndex","Math","floor","random","length","randomRow","randomCol","newValue","filtered","filter","num","i","zerosToAdd","row1","row2","every","value","index","includes","current","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$scoreElement","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$renderBoard","boardGame","scoreGame","statusGame","textContent","cell","className","classList","add","remove","addEventListener","e","key","statusButton"],"version":3,"file":"index.10196deb.js.map"}